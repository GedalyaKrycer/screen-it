{"version":3,"sources":["components/Header/Header.js","utils/SeenItContext.js","components/RatingStarsInput/RatingStarsInput.js","components/FilterValidation/FilterValidation.js","components/Filter/Filter.js","components/RatingStarsDisplay/RatingStarsDisplay.js","components/ResultRow/ResultRow.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Header","SeenItContext","React","createContext","useSeenItContext","useContext","SeenItProvider","children","useState","rating","setRating","starHover","setStarHover","resultsArray","setResultsArray","Provider","value","RatingStarsInput","className","Array","map","star","index","ratingValue","type","name","onClick","width","height","viewBox","fill","xmlns","onMouseEnter","onMouseLeave","d","FilterValidation","nameErrorState","categoryErrorState","ratingErrorState","validateMessages","Filter","ratingError","setRatingError","movieName","setMoveName","movieNameError","setMoveNameError","category","setCategory","categoryError","setCategoryError","onSubmit","event","preventDefault","htmlFor","id","placeholder","onChange","e","target","currentTarget","RatingStarsDisplay","stateValues","ResultRow","result","avatarArray","split","slice","avatarCharacters","forEach","push","charAt","avatarLength","length","trim","disableStar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b3591fdb.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Header = () => {\n    return (\n        <header>\n            <h1>Screen it</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React, { useContext, useState } from \"react\";\n\nconst SeenItContext = React.createContext();\n\nexport const useSeenItContext = () => {\n    return useContext(SeenItContext);\n};\n\n\nexport function SeenItProvider({ children }) {\n\n    // Stores state for the star rating\n    const [rating, setRating] = useState(null);\n\n    // Stores state for the star rating hovering\n    const [starHover, setStarHover] = useState(null);\n\n    // State for Results Data\n    const [resultsArray, setResultsArray] = useState([]);\n\n\n\n    return (\n        <SeenItContext.Provider\n            value={{\n                rating,\n                setRating,\n                starHover,\n                setStarHover,\n                resultsArray,\n                setResultsArray\n            }}\n        >\n            {children}\n        </SeenItContext.Provider>\n\n    );\n}","import React from 'react';\nimport './style.css';\nimport { useSeenItContext } from '../../utils/SeenItContext';\n\nconst RatingStarsInput = () => {\n\n    // Imports states from context\n    const { rating, setRating, starHover, setStarHover } = useSeenItContext();\n\n    return (\n        <div className=\"ratings\">\n\n            {/* Creates an array of 5 to duplicate the stars */}\n            {[...Array(5)].map((star, index) => {\n\n                // Makes the values start at \"1\" instead of \"0\"\n                const ratingValue = index + 1;\n\n                return (\n                    <label key={index}>\n                        <input\n                            type=\"radio\"\n                            name=\"rating\"\n                            className=\"rating__input-radio\"\n                            value={ratingValue}\n\n                            // Controls which item is being selected\n                            onClick={() => setRating(ratingValue)}\n\n                        />\n\n                        <svg\n                            width=\"26\"\n                            height=\"25\"\n                            viewBox=\"0 0 26 25\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n\n                            // Changes classes based on the rating value value being less than or equal to the rating state\n                            className={`rating__star \n                                        ${ratingValue <= (starHover || rating) ? \"rating__star--active\" : \"rating__star--inactive\"}\n                                        `}\n\n                            // If the star is not disabled then the hover class will be added on mouse over\n                            onMouseEnter={() => setStarHover(ratingValue)}\n\n                            // Removes hover class\n                            onMouseLeave={() => setStarHover(null)}\n                        >\n\n                            <path d=\"M11.1745 2.07813C11.8805 0.500952 14.1195 0.500953 14.8255 2.07813L16.8673 6.63967C17.1624 7.29881 17.7898 7.7477 18.5089 7.81408L23.5042 8.2752C25.2648 8.43773 25.964 10.6373 24.6204 11.7866L20.9508 14.9255C20.3849 15.4095 20.1348 16.1678 20.3016 16.8934L21.3809 21.5874C21.7716 23.2866 19.9523 24.6373 18.4388 23.7716L13.9929 21.2289C13.3777 20.877 12.6223 20.877 12.0071 21.2289L7.56121 23.7716C6.04766 24.6373 4.22844 23.2866 4.61913 21.5874L5.69835 16.8934C5.8652 16.1678 5.61509 15.4095 5.04923 14.9255L1.37961 11.7866C0.0359914 10.6373 0.735185 8.43773 2.4958 8.2752L7.49107 7.81408C8.21017 7.7477 8.83764 7.29881 9.13269 6.63967L11.1745 2.07813Z\" />\n                        </svg>\n                    </label>\n                );\n            })}\n        </div>\n    )\n}\n\nexport default RatingStarsInput;","import React from 'react';\nimport './style.css';\n\nconst FilterValidation = ({ nameErrorState, categoryErrorState, ratingErrorState }) => {\n\n\n    // Validation message that gets added to the dom if errors return as true\n    let validateMessages = null;\n\n    if (nameErrorState || categoryErrorState || ratingErrorState) {\n        validateMessages = (<p className=\"validate-errors\">Please fill all fields.</p>);\n    } else {\n        validateMessages = null;\n    }\n\n    return (\n        <>\n            {/* Validate Messages */}\n            { validateMessages}\n        </>\n    )\n\n}\n\nexport default FilterValidation;","import React, { useState } from 'react';\nimport './style.css';\nimport RatingStarsInput from '../RatingStarsInput/RatingStarsInput';\nimport FilterValidation from '../FilterValidation/FilterValidation';\nimport { useSeenItContext } from '../../utils/SeenItContext';\n\n\nconst Filter = () => {\n\n    // Imports states from context\n    const { rating, setRating, setResultsArray } = useSeenItContext();\n\n    // State for category field Error\n    const [ratingError, setRatingError] = useState(false);\n\n    // State for name field \n    const [movieName, setMoveName] = useState('');\n\n    // State for name field Error\n    const [movieNameError, setMoveNameError] = useState(false);\n\n    // State for category field \n    const [category, setCategory] = useState('');\n\n    // State for category field Error\n    const [categoryError, setCategoryError] = useState(false);\n\n\n    // Form Submit \n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        // Validates if data was inputted\n        if (!movieName) {\n            return setMoveNameError(true);\n        } else if (!category || category === \"default\") {\n            return setCategoryError(true);\n        } else if (!rating) {\n            return setRatingError(true);\n        }\n\n        // Reset errors to turn off\n        setMoveNameError(false);\n        setCategoryError(false);\n\n        // Adds all new input values to an array state\n        setResultsArray((resultsArray) => [...resultsArray, {\n            movieName,\n            category,\n            rating\n        }])\n\n        // Resets all input values\n        setMoveName('');\n        setCategory('');\n        setRating('');\n    };\n\n\n    return (\n        <section className=\"filter\">\n            <form onSubmit={handleSubmit} className=\"filter__form\">\n\n                {/* Name of movie */}\n                <div className=\"filter__input-group\">\n                    <label\n                        htmlFor=\"nameInput\"\n                        className=\"filter__label\">Name</label>\n\n                    <input\n                        id=\"nameInput\"\n                        type=\"text\"\n                        placeholder=\"Name of the movie\"\n                        className=\"filter__input\"\n                        value={movieName}\n                        onChange={(e) => setMoveName(e.target.value)}\n                    />\n                </div>\n\n                {/* Category */}\n                <div className=\"filter__input-group\">\n                    <label\n                        className=\"filter__label\"\n                        htmlFor=\"categorySelect\"\n                    >Category</label>\n                    <select\n                        value={category}\n                        id=\"categorySelect\"\n                        onChange={(e) => setCategory(e.currentTarget.value)}\n                        className={`filter__select \n                        ${!category ? \"filter__select--active\" : null}`}>\n                        <option value=\"default\">Select a category</option>\n                        <option value=\"Action\">Action</option>\n                        <option value=\"Comedy\">Comedy</option>\n                        <option value=\"Drama\">Drama</option>\n                        <option value=\"Romance\">Romance</option>\n                        <option value=\"Horror\">Horror</option>\n                        <option value=\"Thriller\">Thriller</option>\n                        <option value=\"Documentary\">Documentary</option>\n                        <option value=\"Other\">Other</option>\n                    </select>\n\n                </div>\n\n                {/* Rating */}\n                <div className=\"filter__input-group--rating\">\n                    <p className=\"filter__label\">Rating</p>\n                    <RatingStarsInput />\n\n                </div>\n\n                {/* Validate Messages */}\n                <FilterValidation\n                    nameErrorState={movieNameError}\n                    categoryErrorState={categoryError}\n                    ratingErrorState={ratingError}\n                />\n\n                {/* Submit Button */}\n                <input\n                    className=\"filter__submit-btn\"\n                    type=\"submit\"\n                    value=\"Add Movie\"\n                />\n            </form>\n\n        </section>\n    )\n}\n\nexport default Filter;","import React from 'react';\nimport './style.css';\n\nconst RatingStarsDisplay = ({ stateValues }) => {\n\n\n\n    return (\n        <div className=\"ratings\">\n\n            {/* Creates an array of 5 to duplicate the stars */}\n            {[...Array(5)].map((star, index) => {\n\n                // Makes the values start at \"1\" instead of \"0\"\n                const ratingValue = index + 1;\n\n                return (\n                    <div key={index}>\n\n                        <svg\n                            width=\"26\"\n                            height=\"25\"\n                            viewBox=\"0 0 26 25\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n\n                            // Changes classes based on the rating value value being less than or equal to the rating state\n                            className={`rating__star \n                                        ${ratingValue <= stateValues ? \"rating__star--active\" : \"rating__star--inactive\"}\n                                        `}\n                        >\n\n                            <path d=\"M11.1745 2.07813C11.8805 0.500952 14.1195 0.500953 14.8255 2.07813L16.8673 6.63967C17.1624 7.29881 17.7898 7.7477 18.5089 7.81408L23.5042 8.2752C25.2648 8.43773 25.964 10.6373 24.6204 11.7866L20.9508 14.9255C20.3849 15.4095 20.1348 16.1678 20.3016 16.8934L21.3809 21.5874C21.7716 23.2866 19.9523 24.6373 18.4388 23.7716L13.9929 21.2289C13.3777 20.877 12.6223 20.877 12.0071 21.2289L7.56121 23.7716C6.04766 24.6373 4.22844 23.2866 4.61913 21.5874L5.69835 16.8934C5.8652 16.1678 5.61509 15.4095 5.04923 14.9255L1.37961 11.7866C0.0359914 10.6373 0.735185 8.43773 2.4958 8.2752L7.49107 7.81408C8.21017 7.7477 8.83764 7.29881 9.13269 6.63967L11.1745 2.07813Z\" />\n                        </svg>\n                    </div>\n                );\n            })}\n        </div>\n    )\n}\n\nexport default RatingStarsDisplay;","import React from 'react';\nimport './style.css';\nimport RatingStarsDisplay from '../RatingStarsDisplay/RatingStarsDisplay';\nimport { useSeenItContext } from '../../utils/SeenItContext';\n\nconst ResultRow = () => {\n    // Imports states from context\n    const { resultsArray } = useSeenItContext();\n\n    // const [avatarLength, setAvatarLength] = useState();\n\n\n\n\n\n    return (\n        <>\n            {\n                resultsArray.map((result, index) => {\n\n                    // Take the movie's name and creates a new array, splitting on the spaces and special characters, but stops after 3 items.\n                    const avatarArray = result.movieName.split(/[^A-Z0-9]/ig).slice(0, 3)\n\n                    // Stores the final 1-3 characters from the array\n                    const avatarCharacters = [];\n\n                    // Loops through array to grab the first character of each word in the array\n                    avatarArray.forEach(e => {\n                        avatarCharacters.push(e.charAt(0));\n                    });\n\n                    // Variable that holds a \"lg\" or \"sm\" value to decide the right class\n                    let avatarLength = \"\";\n\n                    // Decides which size based on avatar length \n                    if (avatarCharacters.length === 3) {\n                        avatarLength = \"sm\";\n                    } else {\n                        avatarLength = \"lg\";\n                    }\n\n                    return <div\n                        key={result.movieName + index}\n                        className=\"result-row\">\n                        <span className={`result-row__avatar ${avatarLength === 'sm' ? 'result-row__avatar--sm' : 'result-row__avatar--lg'}`}>{avatarCharacters}</span>\n\n                        <div className=\"result-row__txt\">\n                            <h2 className=\"result-row__movie-name\">{result.movieName.trim('')}</h2>\n                            <h3 className=\"result-row__category\">{result.category}</h3>\n                        </div>\n                        <div className=\"result-row__rating\" >\n\n                            <RatingStarsDisplay\n                                disableStar={true}\n                                stateValues={result.rating}\n                            />\n                        </div>\n                    </div>\n                })\n            }\n\n        </>\n    )\n}\n\nexport default ResultRow;","import React from \"react\";\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Filter from './components/Filter/Filter';\nimport ResultRow from './components/ResultRow/ResultRow';\nimport EditModal from './components/EditModal/EditModal';\nimport { SeenItProvider } from './utils/SeenItContext';\n\nfunction App() {\n  return (\n    <SeenItProvider>\n      <Header />\n      <Filter />\n      <ResultRow />\n      {/* <EditModal /> */}\n    </SeenItProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}